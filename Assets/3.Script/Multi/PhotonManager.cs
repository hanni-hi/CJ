using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Photon.Pun;
using Photon.Realtime;
using TMPro;

//    $ => string.Format()

public class PhotonManager : MonoBehaviourPunCallbacks
{
    public Image[] canvasImages; // 18개의 캔버스 이미지
    public Sprite originalSprite;

    // 플레이어 컬러 배열
    private Color[] playerColors = { Color.yellow, Color.blue,Color.red,Color.black,new Color(0.5f,0,0.5f) };

    //버전 입력
    private readonly string version = "1.0f";

    //사용자 아이디 입력
    private string userID = "Han";

    //UI관련 변수들
    public GameObject lobbyUI;
    public TextMeshProUGUI playerCountText;
    public Timer gameTimer;
    public Camera lobbyCamera;

    private int requiredPlayer = 2;
    private bool gameStarted = false;

    public GameObject[] playerPrefabs;
    private List<GameObject> availablePrefabs;
    private List<int> usedPrefab = new List<int>();
    private List<int> usedSpawnPoints = new List<int>();

    public ImageColorControl[] buttonImages;

    public Dictionary<int, int> playerPrefabIndexes = new Dictionary<int, int>();

    [PunRPC]
    private void RPC_UpdateUsedChoices(int prefabIndex, int spawnPointIndex)
    {
       if(!usedPrefab.Contains(prefabIndex))
        {
            usedPrefab.Add(prefabIndex);
        }
       
   if(!usedSpawnPoints.Contains(spawnPointIndex))
        {
            usedSpawnPoints.Add(spawnPointIndex);
        }
    }

    //마스터 클라이언트가 선택한걸 다른 플레이어에게 전달함
    [PunRPC]
    private void RPC_selectPrefab(int prefabIndex,int spawnPointIndex, int actorNum)
    {
        Debug.Log($"RPC_selectPrefab=Prefab index {prefabIndex} selected by actor {actorNum}");
        if (!usedPrefab.Contains(prefabIndex))
        {
            usedPrefab.Add(prefabIndex);

        }
        if(!usedSpawnPoints.Contains(spawnPointIndex))
        {
            usedSpawnPoints.Add(spawnPointIndex);
        }

        else
        {
            Debug.LogWarning($"Prefab index {prefabIndex} already used!");
        }

       photonView.RPC("RPC_UpdateUsedChoices",RpcTarget.AllBuffered,prefabIndex,spawnPointIndex);
    }

    [PunRPC]
    private void RPC_UpdateCanvasImage(int buttonIndex,bool isPressed, Color Pcolor, int actorNum)
    {
        //현재 플레이어의 actornumber
        int localANum = PhotonNetwork.LocalPlayer.ActorNumber;
        //현재 플레이어의 prefab 인덱스 
        int localPrefabIndex = playerPrefabIndexes.ContainsKey(localANum) ? playerPrefabIndexes[localANum] : -1;
        //버튼을 누른 플레이어의 prefab 인덱스 
        int pressedPrefabIndex = playerPrefabIndexes.ContainsKey(actorNum) ? playerPrefabIndexes[actorNum] : -1;


       if(isPressed)
        {
            if (localPrefabIndex == pressedPrefabIndex)
            {
                canvasImages[buttonIndex].color = Pcolor;
            }
            else
            {
                Color opponentColor = GetColorByPrefabIndex(pressedPrefabIndex);
                canvasImages[buttonIndex].color = opponentColor;
            }
       }
       else
        {
            canvasImages[buttonIndex].color = Color.gray;
        }
    }

    public Color GetColorByPrefabIndex(int prefabIndex)
    {
        switch(prefabIndex)
        {
            case 0: return Color.yellow;
            case 1: return Color.blue;
            case 2: return Color.red;
            case 3: return Color.black;
            case 4: return new Color(0.5f,0,0.5f); //보라색
            default: return Color.gray;
        }
    }

    void Awake()
    {
        //같은 룸의 유저들에게 자동으로 씬을 로딩
        PhotonNetwork.AutomaticallySyncScene = true;
        //같은 버전의 유저끼리 접속 허용
        PhotonNetwork.GameVersion = version;
        //유저 아이디 할당
        PhotonNetwork.NickName = userID;
      //  //포톤 서버와 통신 횟수 설정. 초당 30회
      //  Debug.Log(PhotonNetwork.SendRate);
        //서버 접속
        PhotonNetwork.ConnectUsingSettings();

        availablePrefabs = new List<GameObject>(playerPrefabs);
    
    }

    //포톤 서버에 접속 후 호출되는 콜백 함수
    public override void OnConnectedToMaster()
    {
      //  Debug.Log("마스터 서버에 들어왔어요! ");
      //  Debug.Log($"PhotonNetwork.InLobby = {PhotonNetwork.InLobby}"); //로비 입장여부 bool로 표시 아마도 false
        PhotonNetwork.JoinLobby();   //로비입장

    }

    //로비에 접속 후 호출되는 콜백 함수
    public override void OnJoinedLobby()
    { 
      //  Debug.Log($"PhotonNetwork.InLobby = {PhotonNetwork.InLobby}"); //아마도 true

        //랜덤한 룸에 접속하게 //랜덤 매치메이킹 기능 제공
        PhotonNetwork.JoinRandomRoom();

    }

    //랜덤한 룸 입장이 실패했을 경우 호출되는 콜백 함수
    public override void OnJoinRandomFailed(short returnCode, string message)
    {
        Debug.Log($"랜덤룸에 입장하는데 실패했습니다 {returnCode} : {message}");

        //룸의 속성을 정의
        RoomOptions ro = new RoomOptions();
        ro.MaxPlayers = 2; //최대 접속자수
        ro.IsOpen = true; //룸의 오픈여부
        ro.IsVisible = true; //로비에서 룸 목록에 보일지 여부

        //룸 생성
        PhotonNetwork.CreateRoom("My Rooom",ro);
    }

    //룸 생성이 완료된 후 호출되는 콜백 함수
    public override void OnCreatedRoom()
    {
        Debug.Log("룸이 생성되었습니다! ");
        Debug.Log($"룸 이름 = {PhotonNetwork.CurrentRoom.Name} ");

    }

    //룸에 입장한 후 호출되는 콜백 함수
    public override void OnJoinedRoom()
    {
        // //룸에 접속한 사용자 정보 확인     ActorNumber:플레이어고유값
        // foreach (var player in PhotonNetwork.CurrentRoom.Players)
        // {
        //     Debug.Log($"{player.Value.NickName}, {player.Value.ActorNumber}");
        // }

        UpdatePlayerCount();
        CheckAndStartGame();
    }

    public override void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    {
        UpdatePlayerCount();
        CheckAndStartGame();
    }

    private void UpdatePlayerCount()
    {
        int playerCount = PhotonNetwork.CurrentRoom.PlayerCount;
        playerCountText.text = $" {playerCount} / 2 ";
    }

    private void CheckAndStartGame()
    {
        if(!gameStarted&&PhotonNetwork.CurrentRoom.PlayerCount==requiredPlayer)
        {
            gameStarted = true;
            StartCoroutine(StartGame());
        }
    }

    private IEnumerator StartGame()
    {
        Debug.Log("여기는 StartGame()");
        yield return new WaitForSeconds(2f);

        lobbyUI.SetActive(false);
        
        if(lobbyCamera !=null)
        {
            lobbyCamera.gameObject.SetActive(false);
        }

        //캐릭터 출현 정보를 배열에 저장
        Transform[] points = GameObject.Find("SpawnPointGroup").GetComponentsInChildren<Transform>();

            int prefabIdx = -1;
            int spawnPointIdx = -1;
        GameObject selectedPrefab = null;

            if (PhotonNetwork.IsMasterClient)
            {
               Debug.Log("나는 마스터 클라이언트! ");
                prefabIdx = Random.Range(0, availablePrefabs.Count);
            spawnPointIdx = Random.Range(1, points.Length);
            selectedPrefab = availablePrefabs[prefabIdx];
                    usedPrefab.Add(prefabIdx);
                    usedSpawnPoints.Add(spawnPointIdx);

            playerPrefabIndexes[PhotonNetwork.LocalPlayer.ActorNumber] = prefabIdx;

            //선택된 프리팹과 스폰 포인트 정보를 모든 클라이언트에게 전송
                photonView.RPC("RPC_selectPrefab", RpcTarget.AllBuffered, prefabIdx,spawnPointIdx ,PhotonNetwork.LocalPlayer.ActorNumber);
        }
            else
            {
            // 두 번째 플레이어가 남은 선택지에서만 선택할 수 있도록 제한
            while (prefabIdx == -1||spawnPointIdx==-1)
                {
                    yield return null;

                        List<int> remainingPrefabs = new List<int>();
                        List<int> remainingSpawnPoints = new List<int>();

                // 남은 프리팹을 선택지에 추가
                for (int i=0; i<availablePrefabs.Count;i++)
                        {
                            if(!usedPrefab.Contains(i))
                            {
                                remainingPrefabs.Add(i);
                            }
                        }

                // 남은 스폰 포인트를 선택지에 추가
                for (int i=1; i<points.Length;i++)
                    {
                        if(!usedSpawnPoints.Contains(i))
                        {
                            remainingSpawnPoints.Add(i);
                        }
                    }
                // 남은 프리팹과 스폰 포인트에서 무작위로 선택
                if (remainingPrefabs.Count > 0&& remainingSpawnPoints.Count > 0)
                        {
                            prefabIdx = remainingPrefabs[Random.Range(0, remainingPrefabs.Count)];
                        spawnPointIdx = remainingSpawnPoints[Random.Range(0, remainingSpawnPoints.Count)];
                    
           
                    selectedPrefab = availablePrefabs[prefabIdx];
            playerPrefabIndexes[PhotonNetwork.LocalPlayer.ActorNumber] = prefabIdx;

                 //   usedPrefab.Add(prefabIdx);
                 //   usedSpawnPoints.Add(spawnPointIdx);

                    // 선택된 프리팹과 스폰 포인트를 모든 클라이언트에게 전송
                    photonView.RPC("RPC_selectPrefab",RpcTarget.AllBuffered,prefabIdx,spawnPointIdx,PhotonNetwork.LocalPlayer.ActorNumber);
                }
                }

            }

            //캐릭터 생성
            PhotonNetwork.Instantiate(selectedPrefab.name, points[spawnPointIdx].position, points[spawnPointIdx].rotation, 0);

            foreach(var button in GameObject.FindGameObjectsWithTag("Button"))
        {
            ButtonTracker tracker = button.GetComponent<ButtonTracker>();
            if(tracker!=null)
            {
                tracker.SetPlayerColor(GetColorByPrefabIndex(prefabIdx));
            }
        }
        //타이머
        gameTimer.StartTimer();
    }

    public override void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
    {
        foreach(var key in propertiesThatChanged.Keys)
        {
            if(key.ToString().StartsWith("Button")&&key.ToString().EndsWith("State"))
            {
                //버튼 인덱스 추출
                int buttonIndex = int.Parse(key.ToString().Substring(6,key.ToString().Length-11));
                //버튼이 눌렸는지 상태를 가져옴
                bool ispressed = (bool)propertiesThatChanged[$"Button{buttonIndex}State"];
                //버튼을 누른 actor의 번호를 가져옴
                int actorNum = (int)PhotonNetwork.CurrentRoom.CustomProperties[$"Button{buttonIndex}Actor"];
                //actorNum에 따른 색상 결정
                int pressedPrefabIndex = playerPrefabIndexes.ContainsKey(actorNum) ? playerPrefabIndexes[actorNum] : -1;
                Color pColor = GetColorByPrefabIndex(pressedPrefabIndex);
            
            if(ispressed)
                {
                    canvasImages[buttonIndex].color = pColor;
                }
            else
                {
                    canvasImages[buttonIndex].color = Color.gray;
                }
            }
        }

       // for(int i=0; i<canvasImages.Length;i++)
       // {
       //     if (propertiesThatChanged.ContainsKey($"Button{i}State"))
       //     {
       //         bool isPressed = (bool)propertiesThatChanged[$"Button{i}State"];
       //         //canvasImages[i].sprite = isPressed ? newSprite : originalSprite;
       //         canvasImages[i].color = isPressed ? playerColors[i%playerColors.Length]:Color.gray;
       //     }
       // }
    }

    public override void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    {
        if(PhotonNetwork.CurrentRoom.PlayerCount==1)
        {
            if(UIManager.instance!=null)
            {
                UIManager.instance.ShowPausePanel_M();
            }
            Time.timeScale = 0;
        }
    }
}
